---
alwaysApply: true
---
# Countent Project Structure & Naming Rules

## Project Overview
This is **Countent** - Your AI Accountant, built with NextJS and PSQL.

## Critical File Structure Rules
- **ALL files must be lowercase** - no exceptions
- Use `@` alias for imports from project root
- Relative imports only for files in same path or below

### Page Structure (only create when needed):
```
user/
‚îú‚îÄ‚îÄ page.tsx
‚îú‚îÄ‚îÄ components/*.tsx     # Components for user and subpages
‚îú‚îÄ‚îÄ functions/
‚îÇ   ‚îú‚îÄ‚îÄ actions.ts      # Server-side functions
‚îÇ   ‚îî‚îÄ‚îÄ utils.ts        # Utility functions
```

### Global Directories:
- `/app/components` - Global components (menus, auth checks, etc.)
- `/utils` - Global utility functions
- `/hooks` - ALL hooks must be here
- `/db/tables` - Database table definitions
- `/content` - Translation files (NEVER edit directly)

## Database Patterns
Reference [db/schema.ts](mdc:db/schema.ts) and [db/tables](mdc:db/tables):
- Primary keys follow pattern: `tablename + "id"` (e.g., `userid`, `companyid`)
- Always export types: `export type TableName = typeof tablename.$inferSelect;`
- Always export insert types: `export type NewTableName = typeof tablename.$inferInsert;`
- Add exports to `/db/schema.ts`: `export * from "./tables/tablename";`
- Always check existing tables for patterns
- Import types from database tables, do not init them in components eg:
```typescript
import { Company } from "@/db/tables/company";
```
- When editing, inserting data, also import types:
```typescript
import { Company } from "@/db/tables/company";
const companyData: NewCompany = {
    ....
```
- The database is the source of truth for data strucutre, it decides UI fields, not the other way around


## Stack & Libraries
Using shadcn UI (components in [app/components/ui](mdc:app/components/ui)), radix-ui, drizzle, zod, lucide-react, tailwindcss

# Translation System Rules

## üåç Translation Requirements
**ALL user-facing text must use `ttt()` function with English text**
- If we are not using ttt the text will never be translated when user changes language. Our app must support all languages

## NEVER Edit Translation Files
- **NEVER edit files inside [content/](mdc:content/)** - user handles translations separately.

## Usage Pattern
```typescript
"use client";
import { useLanguage } from "@/hooks/uselanguage";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";

export function ExampleComponent() {
  const { ttt } = useLanguage();
  
  return (
    <Card className="space-y-6">
      <Label>{ttt("Field Name")}</Label>
      <Button>{ttt("Save Changes")}</Button>
      <p>{ttt("Error message text")}</p>
      <p>{ttt("Welcome back")}: {username}, ${ttt("Good to see you")}</p>
    </Card>
  );
}
```

## Translation Key Guidelines
- Write all keys in **English**
- Keep messages **short and consistent**
- Harmonize similar actions (Delete/Remove/Move to trash ‚Üí all use "Remove")

## Error Handling
- **API errors are for logs only** - never forward to frontend and show the user
- Always use `ttt()` for user-facing error messages. Reuse general error messages like (Something went wrong).
- Example: `return { success: false, error: ttt("Authentication failed") }`


# UI/UX Guidelines & Design Patterns

## Responsive Design
- **Mobile-first responsive design** - always consider mobile first
- Use Tailwind CSS responsive prefixes (`sm:`, `md:`, `lg:`, `xl:`)
- For mobile breakpoint use: import { useIsMobile } from "@/hooks/usemobile";

## Form Design
- Distinguish between **required** and **optional** fields
- Use proper field validation and error states. Reuse general error messages like (Something went wrong). and ttt

## Component Usage
Reference [app/components/ui/](mdc:app/components/ui/) for available shadcn/ui components:
- Use consistent shadcn/ui component patterns
- Import from `@/components/ui/[component-name]`
- Follow established component APIs

## Loading & Error States
- Always implement loading states for async operations
- Proper error handling with user-friendly messages
- Use `ttt()` for all error messages (never forward API errors)
- Instead of saying "Loading $something data.." show spinner.

## Interactive Elements
- Consistent button styles and states
- Proper hover and focus states
- Accessibility considerations (ARIA labels, keyboard navigation)
