# Database Patterns & Table Definitions

## Primary Key Convention
**CRITICAL**: Primary keys must follow `tablename + "id"` pattern
- ❌ Wrong: `id`, `user_id`, `ID`
- ✅ Correct: `userid`, `companyid`, `invoiceid`

## Required Type Exports
Every table file must export both select and insert types:

```typescript
export type TableName = typeof tablename.$inferSelect;
export type NewTableName = typeof tablename.$inferInsert;
```

## Schema Export Pattern
Always add new tables to [db/schema.ts](mdc:db/schema.ts):
```typescript
export * from "./tables/tablename";
```

## Table Definition Example
Reference existing tables in [db/tables/](mdc:db/tables/):

```typescript
import { pgTable, varchar, timestamp } from "drizzle-orm/pg-core";
import { company } from "./company";

export const example = pgTable("example", {
  exampleid: varchar("exampleid", { length: 255 }).primaryKey(),
  companyid: varchar("companyid", { length: 255 })
    .references(() => company.companyid, { onDelete: "cascade" })
    .notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

export type Example = typeof example.$inferSelect;
export type NewExample = typeof example.$inferInsert;
```

## Validation
- All objects and types are defined in [db/tables/](mdc:db/tables/)
- Always check existing tables for patterns
- Import types from database tables, not utils
- The database is the source of truth for data strucutre
