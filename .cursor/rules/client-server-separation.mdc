# Client/Server Separation - CRITICAL RULES

## 🚨 NEVER Import Database in Client Components
**This causes TLS/Node.js import errors and will break the application!**

### ❌ FORBIDDEN in Client Components ("use client"):
- Database utilities from [db/](mdc:db/)
- Server-only functions from [utils/](mdc:utils/)
- Any Node.js specific imports
- Direct database queries

### ✅ Database Queries ONLY Allowed In:
- **Server components** (no "use client" directive)
- **Server actions** (with "use server" directive)
- **API routes** ([app/api/](mdc:app/api/))

## Data Flow Pattern
```
Server Component/Action → Client Component
     (fetch data)         (receive as props)
```

### Example Pattern:
```typescript
// ✅ Server Component (layout.tsx)
export default async function Layout() {
  const companies = await getUserCompanies(); // OK - server component
  return <Sidebar companies={companies} />;   // Pass as props
}

// ✅ Client Component
"use client";
export function Sidebar({ companies }: { companies: Company[] }) {
  // Use companies prop, never import getUserCompanies here
}
```

## Common Error to Avoid
❌ Importing `getUserCompanies()` in client sidebar components
✅ Fetch in parent server component and pass as props

Reference [utils/](mdc:utils/) for available server utilities.
