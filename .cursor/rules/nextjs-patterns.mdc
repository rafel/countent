# NextJS Patterns & Dynamic Routes

## Dynamic Route Parameters
**CRITICAL**: NextJS params must always be awaited in App Router

### Directory Naming
- Use `[paramname]` for dynamic routes (no spaces!)
- Example: `[companyid]/page.tsx`, `[userid]/page.tsx`

### Page Component Pattern
```typescript
interface PageProps {
  params: Promise<{ paramname: string }>;
}

export default async function Page({ params }: PageProps) {
  const { paramname } = await params;
  
  // Use paramname here
  // Always validate user access to the resource
}
```

### Layout Component Pattern
```typescript
interface LayoutProps {
  children: React.ReactNode;
  params: Promise<{ companyid: string }>;
}

export default async function Layout({ children, params }: LayoutProps) {
  const { companyid } = await params;
  
  // Validate user access to company
  const user = await getUser();
  const companies = await getUserCompanies(user);
  // ... validation logic
  
  return <>{children}</>;
}
```

## Navigation & Routing Rules
Based on [specs/base.md](mdc:specs/base.md):
- User with no companies → `/dashboard/new`
- User with companies → `/dashboard/[firstcompanyid]`
- Always use `getUserCompanies()` utility for company access checks
- Always validate user access to companies in layouts/pages

## Access Validation Pattern
```typescript
// Always validate user can access the company/resource
const userCompanies = await getUserCompanies(user);
const hasAccess = userCompanies.some(c => c.companyid === companyid);
if (!hasAccess) {
  redirect('/dashboard');
}
```
